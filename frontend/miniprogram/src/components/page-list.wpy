<style lang="less" scoped>
.item-num {
  font-size: 26rpx;
  color: #b2b2b2;
}
.notice-tip {
  display: flex;
  align-items: center;
  background: #fff;
  padding: 20rpx 40rpx;
  margin-bottom: 30rpx;
  .tip-main {
    flex-grow: 1;
    .tip-title {
      font-size: 32rpx;
    }
    .tip-des {
      font-size: 26rpx;
      color: #7a8299;
      margin-top: 20rpx;
    }
  }
  .btn-action {
    font-size: 34rpx;
    color: #1296db;
  }
}
.user-item {
  padding: 20rpx 30rpx;
  background: #fff;
  margin: 20rpx 30rpx;
  border-radius: 8rpx;
}
</style>
<template>
  <mp-page
    :state="state"
    :triggered="triggered"
    :num="num"
    :scrollY="scrollY"
    :refresherEnabled="refresherEnabled"
    :showBtn="true"
    :enableTips="enableTips"
    :showLoadMore="hasMore"
    :emptyBtnTxt="emptyBtnTxt"
    @emptyTap="onEmptyTap"
    @relaod="onRelaod"
    @scrolltolower="onScrolltolower"
    @refresherrefresh="onRefresherrefresh"
    @refresherrestore="onRefresherrestore"
    @refresherpulling="onRefresherpulling"
  >
    <div class="notice-tip" v-if="showTip">
      <div class="tip-main">
        <div class="tip-title">订阅推送通知</div>
        <div class="tip-des">不再错过重要消息，第一时间收到提醒</div>
      </div>
      <div class="btn-action" @tap="onSubscribe">订阅</div>
    </div>
    <slot />
    <block v-if="controller === 'post'">
      <block
        v-if="action === 'recommend' || action === 'listForUser' || action === 'listForTopic' || action === 'listForSchool'"
      >
        <item-post
          v-for="(item, index) in items"
          :key="item.post.id"
          :item="item"
          :index="index"
          @share="onShare"
          @remove="onRemove"
        />
      </block>
      <block v-else-if="action==='commentsForUser'">
        <item-comment
          v-for="(item, index) in items"
          :key="item.comment.id"
          :item="item"
          :index="index"
        />
      </block>
      <block v-else-if="action === 'likesForUser'">
        <block v-for="(item, index) in items" :key="index">
          <item-post
            :item="item"
            @share="onShare"
            :index="index"
            @remove="onRemove"
            v-if="item.post"
          />
          <div style=" margin-bottom: 30rpx;" v-else>
            <item-comment :item="item" :index="index" />
          </div>
        </block>
      </block>
    </block>
    <block v-else-if="controller === 'topic'">
      <item-topic v-for="item in items" :key="item.id" :item="item">
        <div class="item-num">{{item.followCount}}{{item.nickName}}</div>
      </item-topic>
    </block>
    <block v-else-if="controller === 'tip'">
      <item-trade v-for="item in items" :key="item.id" :item="item"/>
    </block>
    <block v-else-if="controller === 'message'">
      <block v-if="action === 'list'">
        <item-notice v-for="item in items" :key="item.id" :item="item" />
      </block>
      <block v-else>
        <item-sys-notice v-for="item in items" :key="item.id" :item="item" />
      </block>
    </block>
    <block v-else-if="controller === 'user'">
      <div v-for="item in items" :key="item.id" class="user-item">
        <item-user :item="item" :showNum="true" :width="96" :radius="96" />
      </div>
    </block>
  </mp-page>
</template>
<script>
import wepy from '@wepy/core';
import { Post, Topic, Message, User } from '../common/api';
import { Tip } from '../plugin/tip/api'
let self = null;
wepy.component({
  props: {
    dataType: {
      type: Number,
      default: 0
    },
    objId: {
      type: Number,
      default: 0
    },
    action: {
      type: String,
      default: 'recommend'
    },
    controller: {
      type: String,
      default: 'post'
    },
    isInit: {
      type: Boolean,
      default: false
    },
    showTip: {
      type: Boolean,
      default: false
    },
    enableTips: {
      type: Boolean,
      default: true
    },
    scrollY: {
      type: Boolean,
      default: true
    },
    refresherEnabled: {
      type: Boolean,
      default: true
    },
    emptyBtnTxt: String,
    pageSize: {
      type: Number,
      default: 6
    }
  },
  data: {
    state: 0,
    items: [],
    num: -1,
    begin: new Date(),
    pageIndex: 1,
    top: -100,
    triggered: false,
    hasMore: true,
    isLoading: false
  },
  watch: {
    async isInit(val) {
      if (val) {
        this.hasMore = true;
        if (await this.loadData()) {
          if (this.items.length) {
            this.state = 2;
          } else {
            this.state = 3;
          }
        } else {
          this.state = 1;
        }
      }
    }
  },
  methods: {
    async loadData(isRefresh, keyword = null) {
      if ((!this.hasMore && !isRefresh) || this.isLoading) {
        return;
      }
      this.isLoading = true;
      let items = null;
      if (this.controller === 'post') {
        items = await Post[this.action]({
          isRefresh,
          id: this.objId,
          begin: isRefresh ? this.begin : null,
          pageIndex: isRefresh ? 1 : this.pageIndex,
          pageSize: this.pageSize,
          type: this.dataType
        });
      } else if (this.controller === 'topic') {
        if (isRefresh) {
          this.items = [];
        }
        items = await Topic[this.action]({
          isRefresh,
          keyword,
          userId: this.objId,
          begin: isRefresh ? this.begin : null,
          pageIndex: isRefresh ? 1 : this.pageIndex,
          pageSize: this.pageSize
        });
      } else if (this.controller === 'message') {
        items = await Message[this.action]({
          isRefresh,
          begin: isRefresh ? this.begin : null,
          pageIndex: isRefresh ? 1 : this.pageIndex,
          pageSize: this.pageSize
        });
      } else if (this.controller === 'user') {
        items = await User[this.action]({
          type: this.dataType,
          userId: this.objId,
          pageIndex: isRefresh ? 1 : this.pageIndex,
          pageSize: this.pageSize
        });
      } else if(this.controller === 'tip') {
        items = await Tip[this.action]({
          pageIndex: isRefresh ? 1 : this.pageIndex,
          pageSize: this.pageSize
        });
      }
      if (items) {
        for (const item of items) {
          this.items[isRefresh ? 'unshift' : 'push'](item);
        }
        if (isRefresh) {
          this.begin = new Date();
          this.num = items.length;
        } else {
          this.pageIndex++;
        }
        this.hasMore = items.length === this.pageSize;
      }
      this.isLoading = false;
      return items;
    },
    async onScrolltolower() {
      console.log(1);

      await this.loadData();
    },
    async onRefresherpulling() {
      this.triggered = true;
    },
    async onRefresherrefresh() {
      await this.loadData(true);
      setTimeout(() => {
        this.num = -1;
      }, 2000);
      this.triggered = false;
    },
    onRefresherrestore() {
      this.triggered = false;
    },
    onSubscribe() {
      Post.subscribe();
      // wx.navigateTo({
      //   url: '/pages/post-article?url=0'
      // });
    },
    onRemove({ index, post, isSys }) {
      wx.showActionSheet({
        itemList: isSys
          ? ['删除', post.isRecommend ? '取消推荐' : '设为推荐']
          : ['删除'],
        itemColor: '#d81e06',
        success: res => {
          if (res.tapIndex === 0) {
            wx.showModal({
              title: '删除提示',
              content: '确定要删除该贴吗?',
              confirmText: '删除',
              confirmColor: '#d81e06',
              success: async res => {
                if (res.confirm) {
                  if (await Post.removePost(post.id)) {
                    this.items.splice(index, 1);
                  }
                }
              }
            });
          } else if (res.tapIndex === 1) {
            wx.showModal({
              title: '推荐设置提示',
              content: post.isRecommend
                ? '确定要取消推荐吗?'
                : '确定要推荐该贴吗',
              confirmText: post.isRecommend ? '取消推荐' : '设为推荐',
              confirmColor: '#d81e06',
              success: async res => {
                if (res.confirm) {
                  if (await Post.setPostRecommend(post.id)) {
                    if (post.isRecommend) {
                      this.items.splice(index, 1);
                    }
                  }
                }
              }
            });
          }
        }
      });
    },
    onShare({ index, post }) {
      this.$emit('share', post);
    },
    onEmptyTap() {
      this.$emit('emptyTap')
    },
    async onRelaod() {
      this.state = 0;
      await this.loadData(true);
    }
  }
});
</script>
<config>
{
    usingComponents: {
        "item-post": "./item-post",
        "mp-page": "./mp-page",
        "item-topic": "./item-topic",
        "item-comment": "./item-user-comment",
        "item-notice": "./item-notice",
        "item-user": "./item-user",
        "item-sys-notice": "./item-sys-notice",
        "item-trade": "../plugin/tip/components/item-trade"
    }
}
</config>